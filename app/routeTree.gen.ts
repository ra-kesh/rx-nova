/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OrdersImport } from './routes/orders'
import { Route as NotAuthorizedImport } from './routes/not-authorized'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as SignUpSplatImport } from './routes/sign-up.$'
import { Route as SignInSplatImport } from './routes/sign-in.$'
import { Route as AdminCreateImport } from './routes/admin/create'

// Create/Update Routes

const OrdersRoute = OrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const NotAuthorizedRoute = NotAuthorizedImport.update({
  id: '/not-authorized',
  path: '/not-authorized',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const SignUpSplatRoute = SignUpSplatImport.update({
  id: '/sign-up/$',
  path: '/sign-up/$',
  getParentRoute: () => rootRoute,
} as any)

const SignInSplatRoute = SignInSplatImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreateRoute = AdminCreateImport.update({
  id: '/admin/create',
  path: '/admin/create',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/not-authorized': {
      id: '/not-authorized'
      path: '/not-authorized'
      fullPath: '/not-authorized'
      preLoaderRoute: typeof NotAuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/admin/create': {
      id: '/admin/create'
      path: '/admin/create'
      fullPath: '/admin/create'
      preLoaderRoute: typeof AdminCreateImport
      parentRoute: typeof rootRoute
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatImport
      parentRoute: typeof rootRoute
    }
    '/sign-up/$': {
      id: '/sign-up/$'
      path: '/sign-up/$'
      fullPath: '/sign-up/$'
      preLoaderRoute: typeof SignUpSplatImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/orders': typeof OrdersRoute
  '/admin/create': typeof AdminCreateRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/orders': typeof OrdersRoute
  '/admin/create': typeof AdminCreateRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/admin': typeof AdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/orders': typeof OrdersRoute
  '/admin/create': typeof AdminCreateRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/admin/': typeof AdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/not-authorized'
    | '/orders'
    | '/admin/create'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/not-authorized'
    | '/orders'
    | '/admin/create'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/not-authorized'
    | '/orders'
    | '/admin/create'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotAuthorizedRoute: typeof NotAuthorizedRoute
  OrdersRoute: typeof OrdersRoute
  AdminCreateRoute: typeof AdminCreateRoute
  SignInSplatRoute: typeof SignInSplatRoute
  SignUpSplatRoute: typeof SignUpSplatRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotAuthorizedRoute: NotAuthorizedRoute,
  OrdersRoute: OrdersRoute,
  AdminCreateRoute: AdminCreateRoute,
  SignInSplatRoute: SignInSplatRoute,
  SignUpSplatRoute: SignUpSplatRoute,
  AdminIndexRoute: AdminIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/not-authorized",
        "/orders",
        "/admin/create",
        "/sign-in/$",
        "/sign-up/$",
        "/admin/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/not-authorized": {
      "filePath": "not-authorized.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/admin/create": {
      "filePath": "admin/create.tsx"
    },
    "/sign-in/$": {
      "filePath": "sign-in.$.tsx"
    },
    "/sign-up/$": {
      "filePath": "sign-up.$.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
